spring.application.name=matricula-webapp
# ===================================================================
# CONFIGURACIÓN DE LA BASE DE DATOS (SUPABASE/POSTGRESQL)
# ===================================================================
# Esta es la URL de conexión JDBC para PostgreSQL.
# Reemplaza [HOST] con el host que copiaste de Supabase.
#postgresql://postgres.uvujhpggxounricrmigi:[YOUR-PASSWORD]@aws-0-us-east-2.pooler.supabase.com:6543/postgres
spring.datasource.url=jdbc:postgresql://aws-0-us-east-2.pooler.supabase.com:5432/postgres

# El usuario por defecto en Supabase es 'postgres'.
spring.datasource.username=postgres.uvujhpggxounricrmigi

# Pega aquí la contraseña que guardaste al crear el proyecto en Supabase.
spring.datasource.password=@Sudot2547%%

# ===================================================================
# CONFIGURACIÓN DE JPA/HIBERNATE
# ===================================================================
# Le dice a Hibernate que "hable" en el dialecto correcto para PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Esta es una propiedad muy poderosa. 'update' significa que Hibernate
# comparará tus clases @Entity con las tablas en la base de datos y
# creará o modificará las tablas automáticamente para que coincidan.
spring.jpa.hibernate.ddl-auto=update

# Muestra en la consola de tu IDE el SQL que Hibernate está ejecutando.
# Es extremadamente útil para depurar y entender qué está pasando.
spring.jpa.show-sql=true
# ===================================================================
# OPTIMIZACIÓN DEL POOL DE CONEXIONES (HIKARI CP)
# ¡IMPORTANTE PARA ENTORNOS CON MÚLTIPLES USUARIOS!
# ===================================================================
# Número máximo de conexiones que la aplicación puede abrir. 
# El plan gratuito de Supabase tiene un límite, revisa tu dashboard (suele ser ~60). 
# Un valor entre 20 y 30 es un buen punto de partida para una clase.
spring.datasource.hikari.maximum-pool-size=3

# Número mínimo de conexiones inactivas que Hikari intentará mantener.
# Esto mejora la velocidad de respuesta para nuevas peticiones.
spring.datasource.hikari.minimum-idle=1

# Tiempo máximo (en ms) que la app esperará por una conexión del pool.
# 30 segundos es un valor seguro.
spring.datasource.hikari.connection-timeout=30000

# Tiempo máximo (en ms) que una conexión puede estar inactiva en el pool
# antes de ser retirada. 10 minutos es un buen valor.
spring.datasource.hikari.idle-timeout=600000